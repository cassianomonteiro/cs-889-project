block_errors = raw_data %>% group_by(block) %>% summarise(mean_errors = mean(errors), sd = sd(errors))
version
# Contains references to dplyr and ggplot2
library(tidyverse)
library(reshape)
library(knitr)
library(ez)
library(pander)
library(apa)
library(readxl)
# Read excel file
baseline_play = read_excel("experiment_data.xlsx", sheet = "Baseline play")
raw_data = read_excel("experiment_data.xlsx", sheet = "Summary")
block_times = raw_data %>% group_by(block) %>% summarise(mean_time = mean(time), sd = sd(time))
game_times = raw_data %>% group_by(game) %>% summarise(mean_time = mean(time), sd = sd(time))
# Create boxplots
par(cex.axis=0.8)
kable(block_times)
boxplot(time ~ block, data = raw_data, xlab = "Block", ylab = "Time")
points(1:3, block_times$mean_time, col = "red")
kable(game_times)
boxplot(time ~ game, data = raw_data, xlab = "Game", ylab = "Time")
points(1:3, game_times$mean_time, col = "red")
# Shapiro test for normal distribution
block1_data = raw_data %>% filter(block == 1) %>% select(time)
block2_data = raw_data %>% filter(block == 2) %>% select(time)
block3_data = raw_data %>% filter(block == 3) %>% select(time)
regular_data = raw_data %>% filter(game == "Regular") %>% select(time)
camera_data = raw_data %>% filter(game == "Camera") %>% select(time)
shapiro.test(block1_data$time)
shapiro.test(block2_data$time)
shapiro.test(block3_data$time)
shapiro.test(regular_data$time)
shapiro.test(camera_data$time)
attach(raw_data)
pw_block = pairwise.t.test(time, interaction(block), p.adj = "bonferroni", paired = TRUE)
pw_game = pairwise.t.test(time, interaction(game), p.adj = "bonferroni", paired = TRUE)
detach(raw_data)
kable(pw_block$p.value)
kable(pw_game$p.value)
baseline_play$game = "-"
baseline_play$block = 0
scores_data = raw_data %>% filter(block != 1) %>% select(participant, time, block, game, score)
scores_data = rbind(baseline_play, scores_data)
scores_data$block = factor(scores_data$block)
scores_data$game = factor(scores_data$game)
scores_data$score = as.numeric(scores_data$score)
block_scores = scores_data %>% group_by(block) %>% summarise(mean_score = mean(score), sd = sd(score))
game_scores = scores_data %>% group_by(game) %>% summarise(mean_score = mean(score), sd = sd(score))
kable(block_scores)
boxplot(score ~ block, data = scores_data, xlab = "Block", ylab = "Score")
points(1:3, block_scores$mean_score, col = "red")
kable(game_scores)
boxplot(score ~ game, data = scores_data, xlab = "Game", ylab = "Score")
points(1:3, game_scores$mean_score, col = "red")
anova_block = ezANOVA(scores_data, dv=.(score), wid=.(participant), within=.(block), detailed=TRUE)
kable(anova_apa(anova_block, sph_corr ="gg", print=FALSE))
anova_game = ezANOVA(scores_data, dv=.(score), wid=.(participant), within=.(game), detailed=TRUE)
kable(anova_apa(anova_game, sph_corr ="gg", print=FALSE))
block_errors = raw_data %>% group_by(block) %>% summarise(mean_errors = mean(errors), sd = sd(errors))
game_errors = raw_data %>% group_by(game) %>% summarise(mean_errors = mean(errors), sd = sd(errors))
# kable(block_scores)
# boxplot(score ~ block, data = scores_data, xlab = "Block", ylab = "Score")
# points(1:3, block_scores$mean_score, col = "red")
block1_errors = raw_data %>% filter(block == 1) %>% select(errors)
block2_errors = raw_data %>% filter(block == 2) %>% select(errors)
block3_errors = raw_data %>% filter(block == 3) %>% select(errors)
regular_errors = raw_data %>% filter(game == "Regular") %>% select(errors)
camera_errors = raw_data %>% filter(game == "Camera") %>% select(errors)
shapiro.test(block1_errors$errors)
shapiro.test(block2_errors$errors)
shapiro.test(block3_errors$errors)
shapiro.test(regular_errors$errors)
shapiro.test(camera_errors$errors)
blocks_errors = select(raw_data, participant, block, errors) %>% spread(block, errors)
games_errors = select(raw_data, participant, game, errors) %>% spread(game, errors)
blocks_errors$participant = NULL
games_errors$participant = NULL
friedman.test(data.matrix(blocks_errors))
friedman.test(data.matrix(games_errors))
level1_blocks = raw_data %>% filter(block != 1) %>% select(participant, block, shapes) %>% spread(block, shapes)
level1_blocks$`2` = factor(level1_blocks$`2`)
level1_blocks$`3` = factor(level1_blocks$`3`)
level1_games = raw_data %>% filter(block != 1) %>% select(participant, game, shapes) %>% spread(game, shapes)
level1_games$Camera = factor(level1_games$Camera)
level1_games$Regular = factor(level1_games$Regular)
wilcox.test(as.integer(level1_blocks$`2`), as.integer(level1_blocks$`3`), paired = TRUE)
wilcox.test(as.integer(level1_games$Regular), as.integer(level1_games$Camera), paired = TRUE)
level2_data = raw_data %>% filter(block != 1)
level2_data$identified = as.integer(level2_data$squares == "YES") +
as.integer(level2_data$circles == "YES") +
as.integer(level2_data$triangles == "YES") +
as.integer(level2_data$stars == "YES")
level2_data$identified = as.double(level2_data$identified)
level2_data$block = factor(level2_data$block)
level2_data$game = factor(level2_data$game)
level2_blocks = level2_data %>% select(participant, block, identified) %>% spread(block, identified)
level2_games = level2_data %>% select(participant, game, identified) %>% spread(game, identified)
blocks_identified = level2_data %>% group_by(block) %>% summarise(mean_identified = mean(identified), sd = sd(identified))
games_identified = level2_data %>% group_by(game) %>% summarise(mean_identified = mean(identified), sd = sd(identified))
kable(blocks_identified)
boxplot(identified ~ block, data = level2_data, xlab = "Block", ylab = "Shapes identified")
points(1:2, blocks_identified$mean_identified, col = "red")
kable(games_identified)
boxplot(identified ~ game, data = level2_data, xlab = "Game", ylab = "Shapes identified")
points(1:2, games_identified$mean_identified, col = "red")
wilcox.test(level2_blocks$`2`, level2_blocks$`3`, paired = TRUE)
wilcox.test(level2_games$Regular, level2_games$Camera, paired = TRUE)
level3_block2 = raw_data %>% filter(block == 2)
level3_block2$count_errors = abs(3 - as.numeric(level3_block2$n_squares)) +
abs(3 - as.numeric(level3_block2$n_circles)) +
abs(2 - as.numeric(level3_block2$n_triangles)) +
abs(2 - as.numeric(level3_block2$n_stars))
level3_block2 = level3_block2 %>% select(participant, block, game, count_errors)
level3_block3 = raw_data %>% filter(block == 3)
level3_block3$count_errors = abs(4 - as.numeric(level3_block3$n_squares)) +
abs(2 - as.numeric(level3_block3$n_circles)) +
abs(1 - as.numeric(level3_block3$n_triangles)) +
abs(3 - as.numeric(level3_block3$n_stars))
level3_block3 = level3_block3 %>% select(participant, block, game, count_errors)
level3_data = rbind(level3_block2, level3_block3)
level3_blocks = level3_data %>% select(participant, block, count_errors) %>% spread(block, count_errors)
level3_games = level3_data %>% select(participant, game, count_errors) %>% spread(game, count_errors)
blocks_count_errors = level3_data %>% group_by(block) %>% summarise(mean_count_errors = mean(count_errors), sd = sd(count_errors))
games_count_errors = level3_data %>% group_by(game) %>% summarise(mean_count_errors = mean(count_errors), sd = sd(count_errors))
kable(blocks_count_errors)
boxplot(count_errors ~ block, data = level3_data, xlab = "Block", ylab = "Shapes count errors")
points(1:2, blocks_count_errors$mean_count_errors, col = "red")
kable(games_count_errors)
a = boxplot(count_errors ~ game, data = level3_data, xlab = "Game", ylab = "Shapes count errors")
points(1:2, games_count_errors$mean_count_errors, col = "red")
wilcox.test(level3_blocks$`2`, level3_blocks$`3`, paired = TRUE)
wilcox.test(level3_games$Regular, level3_games$Camera, paired = TRUE)
View(block_errors)
View(game_errors)
boxplot(errors ~ block, data = raw_data, xlab = "Block", ylab = "Errors")
points(1:3, block_errors$mean_errors, col = "red")
kable(game_errors)
boxplot(errors ~ game, data = raw_data, xlab = "Block", ylab = "Errors")
points(1:3, game_errors$mean_errors, col = "red")
boxplot(errors ~ block, data = raw_data, xlab = "Block", ylab = "Errors")
points(1:3, block_errors$mean_errors, col = "red")
boxplot(errors ~ game, data = raw_data, xlab = "Block", ylab = "Errors")
points(1:3, game_errors$mean_errors, col = "red")
boxplot(errors ~ block, data = raw_data, xlab = "Block", ylab = "Errors")
points(1:3, block_errors$mean_errors, col = "red")
attach(raw_data)
pw_block = pairwise.t.test(time, interaction(block), p.adj = "bonferroni", paired = TRUE)
pw_game = pairwise.t.test(time, interaction(game), p.adj = "bonferroni", paired = TRUE)
detach(raw_data)
pw_block
pw_game
View(scores_data)
anova_block = ezANOVA(raw_data, dv=.(time), wid=.(participant), within=.(block), detailed=TRUE)
anova_block
anova_game = ezANOVA(raw_data, dv=.(time), wid=.(participant), within=.(game), detailed=TRUE)
anova_game
anova_apa(anova_block, sph_corr ="gg", print=FALSE)
anova_apa(anova_game, sph_corr ="gg", print=FALSE)
phone_data = filter(raw_data, block != 1)
attach(phone_data)
pw_block = pairwise.t.test(time, interaction(block), p.adj = "bonferroni", paired = TRUE)
pw_game = pairwise.t.test(time, interaction(game), p.adj = "bonferroni", paired = TRUE)
detach(phone_data)
pw_block
anova_block = ezANOVA(raw_data, dv=.(time), wid=.(participant), within=.(game, block), detailed=TRUE)
anova_block = ezANOVA(scores_data, dv=.(score), wid=.(participant), within=.(block), detailed=TRUE)
kable(anova_apa(anova_block, sph_corr ="gg", print=FALSE))
anova_game = ezANOVA(scores_data, dv=.(score), wid=.(participant), within=.(game), detailed=TRUE)
kable(anova_apa(anova_game, sph_corr ="gg", print=FALSE))
anova_apa(anova_block, sph_corr ="gg", print=FALSE)
anova_apa(anova_block, sph_corr ="gg", print=FALSE)
anova_block
anova_apa(anova_game, sph_corr ="gg", print=FALSE)
anova_apa(anova_game, sph_corr ="gg")
anova_apa(anova_block, sph_corr ="gg")
anova_apa(anova_block, sph_corr ="gg", print=FALSE)
friedman.test(data.matrix(blocks_errors))
friedman.test(data.matrix(games_errors))
View(level1_blocks)
View(level1_blocks)
wilcox.test(as.integer(level1_blocks$`2`), as.integer(level1_blocks$`3`), paired = TRUE)
wilcox.test(level3_blocks$`2`, level3_blocks$`3`, paired = TRUE)
wilcox.test(level3_games$Regular, level3_games$Camera, paired = TRUE)
wilcox.test(level2_blocks$`2`, level2_blocks$`3`, paired = TRUE)
wilcox.test(level2_games$Regular, level2_games$Camera, paired = TRUE)
